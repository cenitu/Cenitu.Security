@page "/productsListSf"
@using Cenitu.Security.BlazorWebAssembly.Adaptors
@using Syncfusion.Blazor.Data
@using System.Net.Http.Headers
@inject HttpClient HttpClient
@* @inject Blazored.LocalStorage.ILocalStorageService localStorage *@
@inject IHttpClientFactory HttpClientFactory
<div class="content-wrapper e-bigger e-adaptive-demo">
    <div class="e-mobile-layout">
        <div class="e-mobile-content">
            <SfGrid ID="Grid" @ref="DefaultGrid" TValue="ProductListDto" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowExcelExport="true" Toolbar="@(new List<string>() { "Search", "Add", "Edit", "Delete", "Cancel", "Update", "ExcelExport"})" ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})">
                <GridEditSettings AllowAdding=true AllowEditing=true AllowDeleting=true Mode="EditMode.Dialog"></GridEditSettings>
                <SfDataManager HttpClientInstance="@httpClient" Adaptor="Adaptors.ODataV4Adaptor" Url="https://localhost:7064/odata/Products">
                </SfDataManager>
                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ProductListDto"></GridEvents>
                <GridPageSettings PageSize="8"></GridPageSettings>

                <GridColumns>
                    <GridColumn Field="@nameof(ProductListDto.Id)" HeaderText="ID" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="50" />
                    <GridColumn Field="@nameof(ProductListDto.Code)" HeaderText="Code" Width="120" />
                    <GridColumn Field="@nameof(ProductListDto.Description)" HeaderText="Description" Width="250" />

                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>
@code {
    private SfGrid<ProductListDto> DefaultGrid;
    private HttpClient httpClient;

    override protected async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("Auth");
        // var defaultRequestHeaders = ttpClient.DefaultRequestHeaders.Authorization;
        // HttpClient.DefaultRequestHeaders.Authorization = ttpClient.DefaultRequestHeaders.Authorization;
        // HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsync<string>("accessToken"));


        await base.OnInitializedAsync();
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            await this.DefaultGrid.ExportToExcelAsync();
        }
    }
}
