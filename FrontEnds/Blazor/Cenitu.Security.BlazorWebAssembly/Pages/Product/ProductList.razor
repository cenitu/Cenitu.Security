@page "/products"
@attribute [Authorize(Roles ="Admin,User")]
@inject IProductManager productManager

<h3>Product List</h3>

<AuthorizeView Roles="Admin">
    <Authorized>
        <a class="btn btn-primary" href="product/create" >Create</a>
    </Authorized>
</AuthorizeView>

<RadzenDataGrid TItem="ProductListDto" AllowPaging="true" AllowSorting="true"
                PageSize="10" LoadData="LoadProducts" Count="@totalCount">
    <Columns>
        <RadzenDataGridColumn TItem="ProductListDto" Property="Id" Title="ID" Sortable="true" />
        <RadzenDataGridColumn TItem="ProductListDto" Property="Code" Title="Code" Sortable="true" />
        <RadzenDataGridColumn TItem="ProductListDto" Property="Description" Title="Description" />
    </Columns>
</RadzenDataGrid>

@code {
    private List<ProductListDto> products = new();
    private int totalCount;

    private async Task LoadProducts(LoadDataArgs args)
    {
        // Sıralama bilgilerini al
        string sortColumn = args.OrderBy ?? "Id";
        string sortDirection = args.Sorts.Any() && args.Sorts.First().SortOrder == SortOrder.Descending ? "desc" : "asc";

        // Sayfalama bilgilerini al
        int page = (args.Skip.Value / args.Top.Value) + 1;
        int pageSize = args.Top.Value;

        // API'den verileri çek
        var pagedData = await productManager.GetProductsAsync(page, pageSize, sortColumn, sortDirection);

        // Verileri güncelle
        products = pagedData.Data;
        totalCount = pagedData.TotalCount;
    }
}






























@* @page "/products"
@attribute [Authorize(Roles ="Admin,User")]
@inject IProductManager productManager
<h3>ProductList</h3>
<AuthorizeView Roles="Admin">
    <Authorized>
        <a class="btn btn-primary" href="product/create">Create</a>
    </Authorized>
</AuthorizeView>
@if (products.Count>0)
{
    foreach (var product in products)
    {
        <p>@product.Id | @product.Code | @product.Description</p>
    }

    <div class="grid" tabindex="-1">
    <QuickGrid ItemsProvider="@productsProvider" Virtualize="true">
        <PropertyColumn Title="ID" Property="@(c => c.Id)" />
        <PropertyColumn Title="CODE" Property="@(c => c.Code)" />
        <PropertyColumn Title="DESCRIPTION" Property="@(c => c.Description)" />

    </QuickGrid>
</div>
}   
else
{
    <p>No products found</p>
}

@code {
    GridItemsProvider<ProductListDto>? productsProvider;
    List<ProductListDto> products = new List<ProductListDto>();
    override protected async Task OnInitializedAsync()
    {
        products = await productManager.GetProductsAsync();
        // Grid için uygun bir provider oluştur
        productsProvider = async (GridItemsProviderRequest<ProductListDto> request) =>
        {
           
            return  GridItemsProviderResult.From(products, products.Count);
        };
    }
}
 *@