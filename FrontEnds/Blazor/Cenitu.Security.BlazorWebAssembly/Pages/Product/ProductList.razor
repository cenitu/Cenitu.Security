@page "/products"
@attribute [Authorize(Roles = "Admin,User")]
@inject IProductManager productManager

<AuthorizeView Roles="Admin">
    <Authorized>
        <a class="btn btn-primary" href="product/create">Create</a>
    </Authorized>
</AuthorizeView>

<RadzenDataGrid @ref="grid"  SelectionMode="DataGridSelectionMode.Multiple" KeyProperty="Id" IsLoading="@isLoading" Count="@count" Data="@products"
                LoadData="@LoadData" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="4"
                PagerHorizontalAlign="HorizontalAlign.Center" ColumnWidth="200px">
    <Columns>
       
        <RadzenDataGridColumn Property="@nameof(ProductListDto.Id)" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Property="@nameof(ProductListDto.Code)" Title="Code">
            
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ProductListDto.Description)" Title="Description" Width="150px" />
        
    </Columns>
    <LoadingTemplate>
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </LoadingTemplate>
</RadzenDataGrid>


@code {
    bool isLoading;
    int count;
    ODataEnumerable<ProductListDto> products;

    RadzenDataGrid<ProductListDto> grid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


    }




    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        string sortColumn = args.OrderBy ?? "Id";
        string sortDirection = args.Sorts.Any() && args.Sorts.First().SortOrder == SortOrder.Descending ? "desc" : "asc";

        int page = (args.Skip.Value / args.Top.Value) + 1;
        int pageSize = args.Top.Value;
        var result = await productManager.GetProductsAsync(page, pageSize, sortColumn, sortDirection);

        // Update the Data property
        products = result.Data.AsODataEnumerable();
        // Update the count
        count = result.TotalCount;

        isLoading = false;
    }
}






























