@page "/register"
@inject IAccountManagement accountManagemet
<h3>Register</h3>

<AuthorizeView>
    <Authorized>
        <div class="alert alert-success">
            You're already logged in as @context.User.Identity!.Name
        </div>

    </Authorized>
    <NotAuthorized>
        @if (success)
        {
            <div class="alert alert-success">You successfuly registered. Now you can <a href="login">login</a></div>
        }
        else
        {
            if (errors)
            {
                foreach (var error in errorList)
                {
                    <div class="alert alert-danger">@error</div>
                }
            }
            <div class="flex-outer">
                <div class="mb-3">
                    <label class="form-label" for="email">Email</label>
                    <input type="email" class="form-control" @bind="email" autofocus autocomplete="on" required id="email" name="emailInput" placeholder="Enter email" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="password">Password</label>
                    <input class="form-control" @bind="password" autocomplete="on" required id="password" name="passwordInput" placeholder="Enter password" type="password" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="confirmPassword">Confirm Password</label>
                    <input class="form-control" @bind="confirmPassword" autocomplete="on" required id="confirmPassword" name="confirmPasswordInput" placeholder="Confirm password" type="password" />
                </div>
                <div class="mb-3">
                    <button class="btn btn-primary" @onclick="DoRegisterAsync">Register</button>
                </div>
            </div>

        }
    </NotAuthorized>
</AuthorizeView>
@code {
    private bool success, errors;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string[] errorList = [];
    public async Task DoRegisterAsync()
    {
        success = errors = false;
        errorList = [];
        if (string.IsNullOrWhiteSpace(email))
        {
            errors = true;
            errorList = ["Email is required"];
            return;
        }
        if (string.IsNullOrWhiteSpace(password))
        {
            errors = true;
            errorList = ["Password is required"];
            return;
        }
        if (string.IsNullOrWhiteSpace(confirmPassword))
        {
            errors = true;
            errorList = ["Confirm password is required"];
            return;
        }
        if (password != confirmPassword)
        {
            errors = true;
            errorList = ["Passwords do not match"];
            return;
        }
        var result = await accountManagemet.RegisterAsync(email, password);
        if (result.Succeeded)
        {
            success = true;
            email = password = confirmPassword = string.Empty;
        }
        else
        {
            errors = true;
            errorList = result.ErrorList;
        }

    }
}
